{"ast":null,"code":"import { NOTES_LIST_SUCCESS, NOTES_LIST_REQUEST, NOTES_LIST_FAIL, NOTES_CREATE_REQUEST, NOTES_CREATE_SUCCESS, NOTES_CREATE_FAIL, NOTES_DELETE_SUCCESS, NOTES_DELETE_REQUEST, NOTES_DELETE_FAIL, NOTES_UPDATE_REQUEST, NOTES_UPDATE_SUCCESS, NOTES_UPDATE_FAIL } from \"./constants.js\";\nimport axios from \"axios\";\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`http://localhost:8000/api/notes`, config);\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createNoteAction = (title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`http://localhost:8000/api/notes/create`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: NOTES_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteNoteAction = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`http://localhost:8000/api/notes/${id}`, config);\n    dispatch({\n      type: NOTES_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateNoteAction = (id, title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`http://localhost:8000/api/notes/${id}`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: NOTES_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/windows 10/Documents/reactPractice/crm2/frontend/src/redux/action/noteAction.js"],"names":["NOTES_LIST_SUCCESS","NOTES_LIST_REQUEST","NOTES_LIST_FAIL","NOTES_CREATE_REQUEST","NOTES_CREATE_SUCCESS","NOTES_CREATE_FAIL","NOTES_DELETE_SUCCESS","NOTES_DELETE_REQUEST","NOTES_DELETE_FAIL","NOTES_UPDATE_REQUEST","NOTES_UPDATE_SUCCESS","NOTES_UPDATE_FAIL","axios","listNotes","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","message","response","createNoteAction","title","content","category","post","deleteNoteAction","id","delete","updateNoteAction","put"],"mappings":"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","sourcesContent":["import {\r\n  NOTES_LIST_SUCCESS,\r\n  NOTES_LIST_REQUEST,\r\n  NOTES_LIST_FAIL,\r\n  NOTES_CREATE_REQUEST,\r\n  NOTES_CREATE_SUCCESS,\r\n  NOTES_CREATE_FAIL,\r\n  NOTES_DELETE_SUCCESS,\r\n  NOTES_DELETE_REQUEST,\r\n  NOTES_DELETE_FAIL,\r\n  NOTES_UPDATE_REQUEST,\r\n  NOTES_UPDATE_SUCCESS,\r\n  NOTES_UPDATE_FAIL\r\n} from \"./constants.js\";\r\nimport axios from \"axios\";\r\nexport const listNotes = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: NOTES_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`http://localhost:8000/api/notes`, config);\r\n\r\n    dispatch({\r\n      type: NOTES_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({\r\n      type: NOTES_LIST_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\nexport const createNoteAction = (title, content, category) => async (\r\n    dispatch,\r\n    getState\r\n  ) => {\r\n    try {\r\n      dispatch({\r\n        type: NOTES_CREATE_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.post(\r\n        `http://localhost:8000/api/notes/create`,\r\n        { title, content, category },\r\n        config\r\n      );\r\n  \r\n      dispatch({\r\n        type: NOTES_CREATE_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({\r\n        type: NOTES_CREATE_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n  export const deleteNoteAction = (id) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: NOTES_DELETE_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.delete(`http://localhost:8000/api/notes/${id}`, config);\r\n  \r\n      dispatch({\r\n        type: NOTES_DELETE_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({\r\n        type: NOTES_DELETE_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n  \r\n  export const updateNoteAction = (id, title, content, category) => async (\r\n    dispatch,\r\n    getState\r\n  ) => {\r\n    try {\r\n      dispatch({\r\n        type: NOTES_UPDATE_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.put(\r\n        `http://localhost:8000/api/notes/${id}`,\r\n        { title, content, category },\r\n        config\r\n      );\r\n  \r\n      dispatch({\r\n        type: NOTES_UPDATE_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({\r\n        type: NOTES_UPDATE_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}